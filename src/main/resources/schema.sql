drop TABLE IF EXISTS films CASCADE;
drop TABLE IF EXISTS film_genres CASCADE;
drop TABLE IF EXISTS users CASCADE;
drop TABLE IF EXISTS friends CASCADE;
drop TABLE IF EXISTS likes CASCADE;

create table if not exists ratings_mpa (
    ratings_mpa_id integer not null primary key AUTO_INCREMENT,
    ratings_mpa_name VARCHAR(40) NOT NULL
);

create table if not exists genres (
    genre_id integer primary key,
    genre_name varchar(50) not null
);

create table if not exists films (
    film_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(30) NOT NULL,
    description VARCHAR(200),
    release_date TIMESTAMP NOT NULL,
    duration INTEGER CHECK (duration > 0),
    ratings_mpa_id INTEGER NOT NULL REFERENCES ratings_mpa (ratings_mpa_id)
);

create table if not exists film_genres (
    film_id integer references films (film_id) not null,
    genre_id integer references genres (genre_id) not null,
    constraint fk_film foreign key(film_id)
    references films (film_id) on delete cascade on update cascade,
    constraint fk_genres
    foreign key(genre_id)
    references genres (genre_id) on delete restrict on update cascade

);

create table if not exists users (
    user_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(50) NOT NULL,
    login VARCHAR(50) NOT NULL,
    name VARCHAR(50) NOT NULL,
    birthday TIMESTAMP, CHECK(birthday <= CAST(now() AS DATE))
);

create table if not exists friends (
    user_id integer not null,
    other_user_id integer not null,
    status boolean not null,
    constraint fk_user
    foreign key(user_id)
    references users (user_id) on delete cascade on update cascade,
    constraint fk_other_user
    foreign key(other_user_id)
    references users (user_id) on delete cascade on update cascade
);

create table if not exists likes (
    film_id integer not null,
    user_id integer not null,
    constraint fk_film_likes
    foreign key(film_id)
    references films (film_id) on delete cascade on update cascade,
    constraint fk_user_likes
    foreign key(user_id)
    references users (user_id) on delete cascade on update cascade
);