DROP TABLE IF EXISTS USERS, FILM, MPA_RATING, GENRE, FILM_GENRE, LIKES, FRIEND_REQUEST, REVIEW, DIRECTOR, FEEDBACK, EVENT, FILM_DIRECTOR CASCADE;

CREATE TABLE IF NOT EXISTS GENRE
(
    GENRE_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME     VARCHAR(40) NOT NULL
);

CREATE TABLE IF NOT EXISTS MPA_RATING
(
    RATING_ID   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    RATING_NAME VARCHAR(40) NOT NULL
);

CREATE TABLE IF NOT EXISTS FILM
(
    FILM_ID      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME         VARCHAR(40) NOT NULL,
    DESCRIPTION  VARCHAR(200),
    RELEASE_DATE DATE        NOT NULL,
    DURATION     BIGINT,
    RATING_ID    BIGINT      NOT NULL,
    FOREIGN KEY (RATING_ID) REFERENCES MPA_RATING (RATING_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE TABLE IF NOT EXISTS FILM_GENRE
(
    FILM_GENRE_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FILM_ID       BIGINT NOT NULL,
    GENRE_ID      BIGINT NOT NULL,
    CONSTRAINT FILM_GENRE_FK_1 FOREIGN KEY (GENRE_ID) REFERENCES GENRE (GENRE_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FILM_GENRE_FK_2 FOREIGN KEY (FILM_ID) REFERENCES FILM (FILM_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EMAIL    VARCHAR(255) NOT NULL,
    LOGIN    VARCHAR(255) NOT NULL,
    NAME     VARCHAR(255) NOT NULL,
    BIRTHDAY DATE         NOT NULL
);

CREATE TABLE IF NOT EXISTS FRIEND_REQUEST
(
    INITIATOR_USER_ID BIGINT NOT NULL,
    TARGET_USER_ID    BIGINT NOT NULL,
    CONFIRMED         BOOLEAN DEFAULT FALSE,
    CONSTRAINT FRIEND_REQUEST_UNIQUE UNIQUE (INITIATOR_USER_ID, TARGET_USER_ID),
    FOREIGN KEY (INITIATOR_USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (TARGET_USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS LIKES
(
    USER_ID BIGINT NOT NULL,
    FILM_ID BIGINT NOT NULL,
    CONSTRAINT LIKES_UNIQUE UNIQUE (USER_ID, FILM_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FILM_ID) REFERENCES FILM (FILM_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS REVIEW
(
    REVIEW_ID   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CONTENT     VARCHAR(1024),
    IS_POSITIVE BOOLEAN NOT NULL,
    USER_ID     BIGINT  NOT NULL,
    FILM_ID     BIGINT  NOT NULL,
    USEFUL      INT DEFAULT 0,
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
    FOREIGN KEY (FILM_ID) REFERENCES FILM (FILM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE TABLE IF NOT EXISTS FEEDBACK
(
    FEEDBACK_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    REVIEW_ID   BIGINT,
    USER_ID     BIGINT NOT NULL,
    IS_USEFUL   BOOLEAN DEFAULT NULL,
    FOREIGN KEY (REVIEW_ID) REFERENCES REVIEW (REVIEW_ID) ON DELETE CASCADE ON UPDATE RESTRICT,
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE TABLE IF NOT EXISTS DIRECTOR
(
    DIRECTOR_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME        VARCHAR(1024)
);

CREATE TABLE IF NOT EXISTS FILM_DIRECTOR
(
    FILM_DIRECTOR_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FILM_ID          BIGINT NOT NULL,
    DIRECTOR_ID      BIGINT NOT NULL,
    FOREIGN KEY (DIRECTOR_ID) REFERENCES DIRECTOR (DIRECTOR_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FILM_ID) REFERENCES FILM (FILM_ID) ON DELETE CASCADE ON UPDATE RESTRICT
);

CREATE TABLE IF NOT EXISTS EVENT
(
    EVENT_ID   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TS         BIGINT,
    USER_ID    BIGINT,
    EVENT_TYPE VARCHAR(256),
    OPERATION  VARCHAR(256),
    ENTITY_ID  BIGINT,
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE ON UPDATE RESTRICT
);